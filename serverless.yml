service: currency-alarm-api

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: eu-west-1
  timeout: 5
  memorySize: 256
  apiGateway:
    minimumCompressionSize: 1024
    shouldStartNameWithService: true
  tracing:
    apiGateway: true
    lambda: true

  iamRoleStatements:
    - Effect: Allow
      Action:
      - dynamodb:DescribeTable
      - dynamodb:Query
      - dynamodb:Scan
      - dynamodb:GetItem
      - dynamodb:PutItem
      Resource: !GetAtt CurrencyRatesTable.Arn

  environment:
    EXCEPTION_REPORT_TOPIC_ARN: !Ref ExceptionReportTopic
    CURRENCY_RATES_TABLE_NAME: "CurrencyRatesTable"
    FREE_CURRCONV_API_KEY: ${env:FREE_CURRCONV_API_KEY}
    RATES_API_KEY: ${env:RATES_API_KEY}

package:
  individually: true

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-dotenv-plugin
  - serverless-dynamodb-local
  - serverless-jest-plugin
  - serverless-reqvalidator-plugin

custom:
  webpack:
    webpackConfig: 'webpack.config.js'
    includeModules: true
    keepOutputDirectory: true
    packager: 'npm'

  dotenv:
    required:
      file: true

  documentation: ${file(docs.yml)}
  
functions:
  convertCurrency:
    handler: src/convert-currency.convertCurrency
    events:
      - http:
          documentation:
            summary: "Currency converter"
            description: "convert FROM -> TO with AMOUNT"
            tags:
              - Converter
              - Currency
            queryParams:
              - name: "from"
                description: "exchange FROM (e.g USD)"
              - name: "to"
                description: "exchange TO (e.g RUB)"
              - name: "amount"
                description: "without comments (e.g 100)"

            methodResponses:
              - statusCode: "200"
                responseModels:
                  "application/json": "ConverterSuccessResponse"

              - statusCode: "400"
                responseModels:
                  "application/json": "400ValidationResponse"

              - statusCode: "500"
                responseModels:
                  "application/json": "500InternalError"

          path: convert-currency
          method: get
          cors: true

          reqValidatorName: RequestValidator
          request:
            passThrough: WHEN_NO_TEMPLATES
            parameters:
              querystrings:
                from: true
                to: true
                amount: true
  
  getCurrencyRates:
    handler: src/get-currency-rate.getCurrencyRates
    events:
      - http:
          documentation:
            summary: "Get Currency Rate"
            description: "get rate by BASE"
            tags:
              - Rate
              - Currency
            queryParams:
              - name: "base"
                description: "base unit"

          path: get-currency-rate # /rate/{base}, todo, later
          method: get
          cors: true

          reqValidatorName: RequestValidator
          request:
            passThrough: WHEN_NO_TEMPLATES
            parameters:
              querystrings:
                base: true

  updateCurrencyQuotesScheduler:
    handler: src/update-currency-quotes.updateCurrencyQuotes
    events:
      - schedule: rate(1 hour) ## TODO strict options 

resources:
  Resources:
    ExceptionReportTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: "[CurrencyAPI Subscription] Exception reports"
        TopicName: exception-reports

    # -> https://docs.aws.amazon.com/sns/latest/dg/sns-subscription-filter-policies.html
    ExceptionReportEmailSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: !Ref ExceptionReportTopic
        Protocol: email
        Endpoint: Daniil_Shurygin@epam.com

    RequestValidator:  
      Type: "AWS::ApiGateway::RequestValidator"
      Properties:
        Name: 'request-params-validator'
        RestApiId: 
          Ref: ApiGatewayRestApi # implicitly
        ValidateRequestBody: true
        ValidateRequestParameters: true  

    InvalidRequestParamsGatewayResponse:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        RestApiId:
          Ref: ApiGatewayRestApi  # implicitly
        ResponseType: BAD_REQUEST_PARAMETERS
        StatusCode: 400
        ResponseTemplates:
           application/json: |
              {
                "success": false,
                "message": "$context.error.message",
              }

    CurrencyRatesTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Delete
      Properties:
        TableName: ${self:provider.environment.CURRENCY_RATES_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: currencyType
            AttributeType: S
          - AttributeName: date
            AttributeType: S
        KeySchema:
          - AttributeName: currencyType
            KeyType: HASH
          - AttributeName: date
            KeyType: RANGE # same partition
        ProvisionedThroughput:
           ReadCapacityUnits: 1
           WriteCapacityUnits: 1