service: currency-alarm-api

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: eu-west-1
  timeout: 5
  memorySize: 256
  apiGateway:
    minimumCompressionSize: 1024
    shouldStartNameWithService: true
  tracing:
    apiGateway: true
    lambda: true

  environment:
    EMERGENCY_TOPIC: !Ref EmergencyRoomTopic
    CURRENCY_RATES_TABLE_NAME: "CurrencyRatesTable"
    FREE_CURRCONV_API_KEY: ${env:FREE_CURRCONV_API_KEY}
    RATES_API_KEY: ${env:RATES_API_KEY}

package:
  individually: true

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-dotenv-plugin
  - serverless-dynamodb-local

custom:
  webpack:
    webpackConfig: 'webpack.config.js'
    includeModules: true
    keepOutputDirectory: true
    packager: 'npm'

  dotenv:
    required:
      file: true

  documentation: ${file(openAPI.yml)}
  
functions:
  convertCurrencyApi:
    handler: src/convert-currency.convertCurrency
    events:
      - http:
          documentation:
            summary: "Currency converter"
            description: "convert FROM -> TO with AMOUNT"
            tags:
              - Converter
              - Currency
            queryParams:
              - name: "from"
                description: "exchange FROM (e.g USD)"
              - name: "to"
                description: "exchange TO (e.g RUB)"
              - name: "amount"
                description: "without comments (e.g 100)"

            methodResponses:
              - statusCode: "200"
                responseModels:
                  "application/json": "ConverterSuccessResponse"

              - statusCode: "400"
                responseModels:
                  "application/json": "400ValidationResponse"

              - statusCode: "500"
                responseModels:
                  "application/json": "500InternalError"

          path: convert-currency
          method: get
          cors: true
  
          request:
            passThrough: NEVER
            parameters:
              querystrings:
                from: true
                to: true
                query: true
  
  getCurrencyRates:
    handler: src/get-currency-rate.getCurrencyRates
    events:
      - http:
          path: get-currency-rate
          method: get
          cors: true

  updateCurrencyQuotesScheduler:
    handler: src/update-currency-quotes.updateCurrencyQuotes
    events:
      - schedule: rate(1 hour) ## TODO strict options 

resources:
  Resources:
    EmergencyRoomTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: Any errors
        TopicName: emergency-room

    # -> https://docs.aws.amazon.com/sns/latest/dg/sns-subscription-filter-policies.html
    EmergencyRoomEmailSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: !Ref EmergencyRoomTopic
        Protocol: email
        Endpoint: Daniil_Shurygin@epam.com


    # not used yet;
    RequestParamsValidator:  
      Type: "AWS::ApiGateway::RequestValidator"
      Properties:
        Name: 'RequestParamsValidator'
        RestApiId: 
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: true  

    CurrencyRatesTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.CURRENCY_RATES_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: currencyType
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: currencyType
            KeyType: RANGE # same partition
        ProvisionedThroughput:
           ReadCapacityUnits: 1
           WriteCapacityUnits: 1